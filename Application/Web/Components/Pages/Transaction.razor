@page "/transaction"
@using Mediator
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Http
@using System.ComponentModel.DataAnnotations
@using Split.Domain.Primitives
@using Split.Domain.Transaction.Events
@using System.Security.Claims
@using Split.Domain.User
@using Split.Domain.User.Events
@using System.Diagnostics.CodeAnalysis
@using Split.Application.Web.Components.Elements
@rendermode InteractiveServer
@attribute [Authorize]
@inject IHttpContextAccessor httpContextAccessor
@inject IMediator mediator

<div class="simple-form">
    <h1>New Transaction</h1>

    <EditForm EditContext="@editContext" FormName="NewTransactionForm" OnValidSubmit="ValidSubmitHandler">
        <DataAnnotationsValidator />
        <p>
            <InputUsers Label="Recipients" @bind-Users="@model.Recipients" CurrentUser="currentUser" />
            <ValidationMessage For="@(() => model.Recipients)" />
        </p>
        <p>
            <label>
                <span>Amount</span>
                <InputNumber @bind-Value="@model.Amount" required placeholder />
            </label>
            <ValidationMessage For="@(() => model.Amount)" />
        </p>
        <p>
            <label>
                <span>Description</span>
                <InputText @bind-Value="@model.Description" placeholder />
            </label>
            <ValidationMessage For="@(() => model.Description)" />
        </p>
        <p>
            <button type="submit">Send</button>
        </p>
    </EditForm>
</div>

<div id="transaction-completed" completed="@transactionCompleted">
    <h1>Transaction Completed</h1>
    <p>Your transaction has been successfully created.</p>
    <NavLink href="/transaction" class="new">New Transaction</NavLink>
    <NavLink href="/" class="back">Back to Home</NavLink>
</div>

@code {
    [SupplyParameterFromForm]
    public TransactionForm model { get; set; } = default!;
    private EditContext editContext = default!;
    private ValidationMessageStore extraValidationMessageStore = default!;
    private bool transactionCompleted = false;
    private UserId currentUser = null!;

    protected override void OnInitialized()
    {
        model ??= new();
        editContext = new(model);
        extraValidationMessageStore = new(editContext);
        editContext.OnFieldChanged += (_, _) => extraValidationMessageStore.Clear();

        var userClaimId = httpContextAccessor.HttpContext?.User.FindFirst(ClaimTypes.NameIdentifier);
        if (userClaimId is null)
        {
            return;
        }
        currentUser = new($"{userClaimId.Issuer}:{userClaimId.Value}");
    }

    public async Task ValidSubmitHandler()
    {
        var request = new CreateTransactionRequest(
            new(model.Amount!.Value, new("SEK")),
            model.Description,
            currentUser,
            model.Recipients
        );
        await mediator.Send(request);
        transactionCompleted = true;
    }

    public record TransactionForm
    {
        [Required(ErrorMessage = "Recipient is required.")]
        [MinLength(1, ErrorMessage = "At least one recipient must be selected.")]
        public UserId[] Recipients { get; set; } = [];

        [Required(ErrorMessage = "Amount is required.")]
        [Range(double.Epsilon, double.MaxValue, ErrorMessage = "Amount must be greater than zero.")]
        public decimal? Amount { get; set; }

        [StringLength(100, ErrorMessage = "Description cannot exceed 100 characters.")]
        public string Description { get; set; } = "";
    }
}
