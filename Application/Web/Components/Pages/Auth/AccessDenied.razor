@page "/auth/access-denied"
@using System.ComponentModel.DataAnnotations
@using Mediator
@using Microsoft.AspNetCore.Http
@using Microsoft.AspNetCore.WebUtilities
@using Split.Domain.User.Events
@using System.Security.Claims
@inject IHttpContextAccessor httpContextAccessor
@inject IMediator mediator
@inject NavigationManager navigationManager

<div>
    <h1>Create an Account</h1>

    <EditForm Model="Model" FormName="CreateAccountForm" OnValidSubmit="ValidSubmitHandler">
        <DataAnnotationsValidator />
        <p>
            <label>
                <span>Name</span>
                <InputText @bind-Value="Model!.Name" required />
            </label>
        </p>
        <p>
            <label>
                <span>Phone number</span>
                <InputText @bind-Value="Model!.PhoneNumber" required />
            </label>
        </p>
        <ValidationSummary />
        <p>
            <button type="submit">Create Account</button>
        </p>
    </EditForm>
</div>

@code {
    [SupplyParameterFromForm]
    public UserInformation? Model { get; set; }

    protected override void OnInitialized()
    {
        Model ??= new UserInformation();
        Model.Name ??= httpContextAccessor.HttpContext?.User.FindFirstValue(ClaimTypes.Name);
    }

    public async Task ValidSubmitHandler()
    {
        if (Model is not { Name: string name, PhoneNumber: string phoneNumber })
        {
            return;
        }

        var userClaimId = httpContextAccessor.HttpContext?.User.FindFirst(ClaimTypes.NameIdentifier);
        if (userClaimId is null)
        {
            return;
        }

        var request = new CreateUserRequest(new($"{userClaimId.Issuer}:{userClaimId.Value}"), name, new(phoneNumber));
        await mediator.Send(request);
        navigationManager.NavigateTo(GetReturnUrl());
    }

    private string GetReturnUrl()
    {
        var query = QueryHelpers.ParseQuery(navigationManager.ToAbsoluteUri(navigationManager.Uri).Query);
        return query.TryGetValue("returnUrl", out var returnUrlStrings) && returnUrlStrings is [string returnUrl] ? returnUrl : "/";
    }

    public record UserInformation
    {
        [Required(ErrorMessage = "Name is required.")]
        [RegularExpression(@".*\S.*", ErrorMessage = "Name is required and cannot be just whitespace.")]
        public string? Name { get; set; }

        [Required(ErrorMessage = "Phone number is required.")]
        [RegularExpression(@"^\+\d+$", ErrorMessage = "Phone number must start with a '+' followed by only digits.")]
        public string? PhoneNumber { get; set; }
    }
}
