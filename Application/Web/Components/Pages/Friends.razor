@page "/friends"
@using Mediator
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Http
@using Microsoft.AspNetCore.WebUtilities
@using Split.Application.Web.Services
@using Split.Domain.Primitives
@using Split.Domain.User
@using System.Security.Claims
@using Split.Domain.User.Events
@attribute [Authorize]
@inject IHttpContextAccessor httpContextAccessor
@inject IMediator mediator
@inject FriendshipCodeService friendshipCodeService
@inject NavigationManager navigationManager

<PageTitle>Friends</PageTitle>

<h1>Friends</h1>

<ul>
    @foreach (var friend in UserFriends)
    {
        <li>
            <span>@friend.Name</span>
        </li>
    }
</ul>

<p>Use this QR code to add friends</p>

@(userId is not null ?
    (MarkupString)friendshipCodeService.GetFriendshipQrCodeSvg(navigationManager.ToAbsoluteUri(navigationManager.Uri), userId) 
    : null)

@code {
    private UserId? userId;
    private UserAggregate[] UserFriends { get; set; } = [];

    protected override async Task OnInitializedAsync()
    {
        var userClaimId = httpContextAccessor.HttpContext?.User.FindFirst(ClaimTypes.NameIdentifier);
        if (userClaimId is null)
        {
            return;
        }
        userId = new UserId($"{userClaimId.Issuer}:{userClaimId.Value}");

        if (GetJoinRequest() is string joinRequest && friendshipCodeService.DecodeFriendshipCode(joinRequest) is UserId friendId)
        {
            _ = await mediator.Send(new CreateFriendshipRequest(userId, friendId));
        }

        UserFriends = await mediator.CreateStream(new FriendsQuery(userId)).Select(r => r.Friend).ToArrayAsync();
    }

    private string? GetJoinRequest()
    {
        var query = QueryHelpers.ParseQuery(navigationManager.ToAbsoluteUri(navigationManager.Uri).Query);
        return query.TryGetValue("addFriend", out var addFriendStrings) && addFriendStrings is [string addFriend] ? addFriend : null;
    }
}
