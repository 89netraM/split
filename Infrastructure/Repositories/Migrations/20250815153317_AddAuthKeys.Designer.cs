// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Split.Infrastructure.Repositories;

#nullable disable

namespace Split.Infrastructure.Repositories.Migrations
{
    [DbContext(typeof(SplitDbContext))]
    [Migration("20250815153317_AddAuthKeys")]
    partial class AddAuthKeys
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Split.Domain.Transaction.TransactionAggregate", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.PrimitiveCollection<string[]>("RecipientIds")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<DateTimeOffset?>("RemovedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SenderId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SenderId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("Split.Domain.User.UserAggregate", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("RemovedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("PhoneNumber")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Split.Domain.Transaction.TransactionAggregate", b =>
                {
                    b.HasOne("Split.Domain.User.UserAggregate", null)
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Split.Domain.Primitives.Money", "Amount", b1 =>
                        {
                            b1.Property<Guid>("TransactionAggregateId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("numeric");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("TransactionAggregateId");

                            b1.ToTable("Transactions");

                            b1.WithOwner()
                                .HasForeignKey("TransactionAggregateId");
                        });

                    b.Navigation("Amount")
                        .IsRequired();
                });

            modelBuilder.Entity("Split.Domain.User.UserAggregate", b =>
                {
                    b.OwnsMany("Split.Domain.User.AuthKeyEntity", "AuthKeys", b1 =>
                        {
                            b1.Property<string>("Id")
                                .HasColumnType("text");

                            b1.Property<byte[]>("Key")
                                .IsRequired()
                                .HasColumnType("bytea");

                            b1.Property<long>("SignCount")
                                .HasColumnType("bigint");

                            b1.Property<string>("UserAggregateId")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("Id");

                            b1.HasIndex("UserAggregateId");

                            b1.ToTable("AuthKeyEntity");

                            b1.WithOwner()
                                .HasForeignKey("UserAggregateId");
                        });

                    b.Navigation("AuthKeys");
                });
#pragma warning restore 612, 618
        }
    }
}
